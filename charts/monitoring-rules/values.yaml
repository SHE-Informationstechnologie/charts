# Default values for monitoring-rules.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: ""
fullnameOverride: ""

# General settings affecting every templated resource
prometheusLabels:
  # The prometheus operator will only fetch resources containing the correct
  # 'release'-label.
  release: kube-prometheus-stack

# Amphora load balancer metrics
amphora:
  enabled: false

  # Since the load balancers are running outside of Kubernetes
  # we need to define a fixed range of ip addresses, from which
  # Prometheus can scrape the metrics. This is configured via endpoints
  endpoints:
    enabled: true
    addresses:
    - ip: 1.2.3.4

  # En-/Disable Grafana dashboards
  grafanaDashboards:
    enabled: true

  # Service settings
  service:
    enabled: true
    port: 8080

  # Service settings
  serviceMonitor:
    enabled: true
    # namespaceSelector:
    #     matchNames:
    #     - monitoring
    # selector:
    #   matchLabels:
    #     app: example-amphora

  # Prometheus rules / alerts
  prometheusRules:
    enabled: true
    disabledRules: {}
      # octaviaLoadBalancerPoolDown: false
      # octaviaListenerDown: false
      # octaviaMemberDown: false
      # octaviaHighConnections: false
      # octaviaHighBackendResponseTime: false
      # octaviaHighPoolErrorRate: false

kubernetes:
  enabled: true

  disabledRules: {}
    # masterIsMissing: false
    # wrongAmountOfMasters: false

  masterIsMissing:
    role: master
    amount: 3

# Postgres exporter specific metrics
postgres:
  enabled: false

  # En-/disable podMonitor which will fetch metrics from postgres pods
  podMonitor: true

  disabledRules: {}
    # pgExporterScrapeError: false
    # exporterDown: false
    # pgIsUp: false
    # pgDataChecksum: false
    # diskFillPredict: false
    # pgClusterRoleChange: false
    # pgDiskSize: false
    # pgReplicationByteLag: false
    # pgReplicationSlotsInactive: false
    # pgArchiveCommandStatus: false
    # pgSettingsPendingRestart: false
    # pgBackrestLastCompletedFull: false
    # pgBackrestLastCompletedIncr: false
    # pgBackrestLastCompletedDiff: false

  pgBackrest:
    stanza: db
    maxTimeSinceFull: 648000
    maxTimeSinceIncr: 129600
    maxTimeSinceDiff: 129600

  replication:
    maxReplicationBytesWarn: 5.24288e+08
    maxReplicationBytesCrit: 1.048576e+09

# MinIO embedded exporter metrics
minio:
  enabled: false

  # Service monitor settings
  serviceMonitor:
    enabled: true

  grafanaDashboards:
    enabled: true

    # Configure the tls management of each endpoint
    # like disabling the verification of server certificates
    # or setting a custom CA certificate
    tlsConfig:
      insecureSkipVerify: true

    # Tell prometheus which namespace will be observed by this
    # servicemonitor
    namespaceSelector:
      any: true

    # Add criteria that service monitor uses to select
    # the services to monitor
    selector:
      matchLabels:
        v1.min.io/tenant: pgbackrest

  disabledRules: {}
    # driveOffline: false
    # nodeOffline: false
    # driveSpaceUsage: false
    # driveSpaceUsageCritical: false
    # queuedBytes: false
    # linkOffline: false

# MinIO mirror
minioMirror:
  enabled: false

  disabledRules: {}
    # failingS3Ops: false
    # restarts: false

# Trivy Operator Dashboards
trivy:
  enabled: false
  # deploy dashboard
  grafanaDashboards:
    enabled: true

argocd:
  enabled: false

  disabledRules: {}
    # AppNotSynced: false
    # AppNotHealthy: false

logging:
  enabled: false
  namespace: logging
  podMonitor: true
