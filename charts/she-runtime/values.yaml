argo:
  targetCluster: in-cluster
  # targetClusterAltName can be used to override the cluster name for resource naming purposes
  targetClusterAltName: null
  project: default

sealedSecrets:
  namespace: sealed-secrets
  name: sealed-secrets
  enabled: true
  source:
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: 1.5.2
    chart: sealed-secrets
    helm:
      parameters:
        - name: skipRecreate
          value: 'true'

postgresOperator:
  namespace: postgres-operator
  name: postgres-operator
  enabled: true
  source:
    repoURL: https://github.com/SHE-Informationstechnologie/postgres-operator-examples.git
    path: kustomize/install
    targetRevision: v5.3.1-she-3

customerApplications:
  enabled: false
  namespace: she-vendor
  name: customer-applications
  source:
    repoURL: my.repo.url
    path: path/to/app
    targetRevision: HEAD
    directory:
      recurse: false

eckOperator:
  namespace: eck-operator
  name: eck-operator
  enabled: false
  source:
    repoURL: https://helm.elastic.co
    targetRevision:  2.9.0
    chart: eck-operator

prometheusOperator:
  namespace: monitoring
  name: prom-operator
  enabled: true
  ingress:
    enabled: true
    baseUrl: my.domain
    # annotations: {}
  prometheusNodeExporter:
    hostNetwork: true
  alertmanager:
    alertmanagerSpec:
      storage: {}
    enabled: true
    ingress: {}
    ## Alertmanager configuration directives  
    ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file  
    ##      https://prometheus.io/webtools/alerting/routing-tree-editor/
    config: {}
    ## Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the
    ## Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/.
    secrets: []
    storage: {}
    # ingress:
      # enabled: true
      # baseUrl: my.domain
      # annotations: {}
  grafana:
    enabled: true
    ingress: {}
    # ingress:
      # enabled: true
      # baseUrl: my.domain
      # annotations: {}
    # auth:
      # generic_oauth: # See also https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/#generic-oauth-authentication
        # enabled: true
        # role_attribute_path: resource_access.grafana.roles[0]
        # name: Oauth
        # ...
    # extraConfigmapMounts:
    # - name: example
    #   mountPath: /etc/example
    #   configMap: example
    #   readOnly: true
    # extraSecretMounts:
    # - name: example-name
    #   mountPath: /etc/example
    #   secretName: exmple
    #   readOnly: true
    #   defaultMode: 0440
  prometheus:
    enabled: true
    commonLabels: {}
#      labelKey: labelValue
    crunchyPostgresExporter:
      enabled: true
#    serviceMonitorSelectors:
#      matchLabels:
#        kubernetes.she.net/prometheus-instance: default
#    podMonitorSelectors:
#      matchLabels:
#        kubernetes.she.net/prometheus-instance: default
    ingress: {}
    # ingress:
      # enabled: true
      # baseUrl: my.domain
      # annotations: {}
    prometheusSpec:
      storageSpec: {}
  # defaultRules: {}
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 50.3.1
    chart: kube-prometheus-stack
    helm:
      values: |

internalIngressController:
  namespace: internal-ingress
  name: internal-ingress
  enabled: true
  source:
    repoURL: https://kubernetes.github.io/ingress-nginx
    targetRevision: 4.7.1
    chart: ingress-nginx
    helm:
      parameters:
        - name: controller.ingressClass
          value: nginx-internal
        - name: controller.watchIngressWithoutClass
          value: 'true'
        - name: controller.ingressClassResource.name
          value: nginx-internal
        - name: controller.ingressClassResource.default
          value: 'true'
publicIngressController:
  namespace: public-ingress
  name: public-ingress
  enabled: true
  source:
    repoURL: https://kubernetes.github.io/ingress-nginx
    targetRevision: 4.7.1
    chart: ingress-nginx
    helm:
      parameters:
        - name: controller.ingressClassResource.controllerValue
          value: k8s.io/ingress-nginx-public

argoApp:
  namespace: argocd
  name: argo
  enabled: false
  source:
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: 5.45.1
    chart: argo-cd
    helm:
      parameters:
        - name: server.ingress.enabled
          value: 'true'
        - name: controller.metrics.enabled
          value: 'true'

velero:
  namespace: velero
  name: velero
  enabled: true
  initContainers:
  - name: velero-plugin-for-aws
    image: velero/velero-plugin-for-aws:v1.7.1
    imagePullPolicy: IfNotPresent
    volumeMounts:
    - mountPath: /target
      name: plugins
  resources:
    requests:
      cpu: 500m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
  source:
    repoURL: https://vmware-tanzu.github.io/helm-charts
    targetRevision: 5.0.2
    chart: velero
    helm:
      values: |

metrics:
  namespace: kube-system
  name: metrics
  enabled: false
  source:
    repoURL: https://kubernetes-sigs.github.io/metrics-server
    targetRevision: 3.11.0
    chart: metrics-server
    helm:
      values: |
        defaultArgs:
          - --cert-dir=/tmp
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls

kyverno:
  namespace: kyverno
  name: kyverno
  enabled: false
  source:
    repoURL: https://kyverno.github.io/kyverno
    chart: kyverno
    targetRevision: 3.0.5
    helm:
      parameters:
        - name: admissionController.replicas
          value: '3'

kyvernoPolicies:
  enabled: false
  namespace: kyverno
  name: kyverno-policies
  source:
    repoURL: https://she-informationstechnologie.github.io/charts
    chart: kyverno-policies
    targetRevision: 0.0.2

